// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx.proto

#ifndef PROTOBUF_onnx_2eproto__INCLUDED
#define PROTOBUF_onnx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace onnx {
class AttributeProto;
class AttributeProtoDefaultTypeInternal;
extern AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
class GraphProto;
class GraphProtoDefaultTypeInternal;
extern GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
class ModelProto;
class ModelProtoDefaultTypeInternal;
extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
class NodeProto;
class NodeProtoDefaultTypeInternal;
extern NodeProtoDefaultTypeInternal _NodeProto_default_instance_;
class SparseTensorProto;
class SparseTensorProtoDefaultTypeInternal;
extern SparseTensorProtoDefaultTypeInternal _SparseTensorProto_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorProto_Segment;
class TensorProto_SegmentDefaultTypeInternal;
extern TensorProto_SegmentDefaultTypeInternal _TensorProto_Segment_default_instance_;
class TypeProto;
class TypeProtoDefaultTypeInternal;
extern TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
class TypeProto_SparseTensorTypeProto;
class TypeProto_SparseTensorTypeProtoDefaultTypeInternal;
extern TypeProto_SparseTensorTypeProtoDefaultTypeInternal _TypeProto_SparseTensorTypeProto_default_instance_;
class TypeProto_TensorShapeProto;
class TypeProto_TensorShapeProtoDefaultTypeInternal;
extern TypeProto_TensorShapeProtoDefaultTypeInternal _TypeProto_TensorShapeProto_default_instance_;
class TypeProto_TensorShapeProto_Dimension;
class TypeProto_TensorShapeProto_DimensionDefaultTypeInternal;
extern TypeProto_TensorShapeProto_DimensionDefaultTypeInternal _TypeProto_TensorShapeProto_Dimension_default_instance_;
class TypeProto_TensorTypeProto;
class TypeProto_TensorTypeProtoDefaultTypeInternal;
extern TypeProto_TensorTypeProtoDefaultTypeInternal _TypeProto_TensorTypeProto_default_instance_;
class ValueInfoProto;
class ValueInfoProtoDefaultTypeInternal;
extern ValueInfoProtoDefaultTypeInternal _ValueInfoProto_default_instance_;
}  // namespace onnx

namespace onnx {

namespace protobuf_onnx_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_onnx_2eproto

enum AttributeProto_AttributeType {
  AttributeProto_AttributeType_UNDEFINED = 0,
  AttributeProto_AttributeType_FLOAT = 1,
  AttributeProto_AttributeType_INT = 2,
  AttributeProto_AttributeType_STRING = 3,
  AttributeProto_AttributeType_TENSOR = 4,
  AttributeProto_AttributeType_GRAPH = 5,
  AttributeProto_AttributeType_FLOATS = 6,
  AttributeProto_AttributeType_INTS = 7,
  AttributeProto_AttributeType_STRINGS = 8,
  AttributeProto_AttributeType_TENSORS = 9,
  AttributeProto_AttributeType_GRAPHS = 10
};
bool AttributeProto_AttributeType_IsValid(int value);
const AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MIN = AttributeProto_AttributeType_UNDEFINED;
const AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MAX = AttributeProto_AttributeType_GRAPHS;
const int AttributeProto_AttributeType_AttributeType_ARRAYSIZE = AttributeProto_AttributeType_AttributeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttributeProto_AttributeType_descriptor();
inline const ::std::string& AttributeProto_AttributeType_Name(AttributeProto_AttributeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttributeProto_AttributeType_descriptor(), value);
}
inline bool AttributeProto_AttributeType_Parse(
    const ::std::string& name, AttributeProto_AttributeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttributeProto_AttributeType>(
    AttributeProto_AttributeType_descriptor(), name, value);
}
enum TensorProto_DataType {
  TensorProto_DataType_UNDEFINED = 0,
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_UINT8 = 2,
  TensorProto_DataType_INT8 = 3,
  TensorProto_DataType_UINT16 = 4,
  TensorProto_DataType_INT16 = 5,
  TensorProto_DataType_INT32 = 6,
  TensorProto_DataType_INT64 = 7,
  TensorProto_DataType_STRING = 8,
  TensorProto_DataType_BOOL = 9,
  TensorProto_DataType_FLOAT16 = 10,
  TensorProto_DataType_DOUBLE = 11,
  TensorProto_DataType_UINT32 = 12,
  TensorProto_DataType_UINT64 = 13,
  TensorProto_DataType_COMPLEX64 = 14,
  TensorProto_DataType_COMPLEX128 = 15
};
bool TensorProto_DataType_IsValid(int value);
const TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_UNDEFINED;
const TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_COMPLEX128;
const int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor();
inline const ::std::string& TensorProto_DataType_Name(TensorProto_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TensorProto_DataType_descriptor(), value);
}
inline bool TensorProto_DataType_Parse(
    const ::std::string& name, TensorProto_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TensorProto_DataType>(
    TensorProto_DataType_descriptor(), name, value);
}
enum Version {
  _START_VERSION = 0,
  IR_VERSION_2017_10_10 = 1,
  IR_VERSION = 2
};
bool Version_IsValid(int value);
const Version Version_MIN = _START_VERSION;
const Version Version_MAX = IR_VERSION;
const int Version_ARRAYSIZE = Version_MAX + 1;

const ::google::protobuf::EnumDescriptor* Version_descriptor();
inline const ::std::string& Version_Name(Version value) {
  return ::google::protobuf::internal::NameOfEnum(
    Version_descriptor(), value);
}
inline bool Version_Parse(
    const ::std::string& name, Version* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Version>(
    Version_descriptor(), name, value);
}
// ===================================================================

class AttributeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.AttributeProto) */ {
 public:
  AttributeProto();
  virtual ~AttributeProto();

  AttributeProto(const AttributeProto& from);

  inline AttributeProto& operator=(const AttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttributeProto(AttributeProto&& from) noexcept
    : AttributeProto() {
    *this = ::std::move(from);
  }

  inline AttributeProto& operator=(AttributeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeProto& default_instance();

  static inline const AttributeProto* internal_default_instance() {
    return reinterpret_cast<const AttributeProto*>(
               &_AttributeProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AttributeProto* other);
  friend void swap(AttributeProto& a, AttributeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttributeProto* New() const PROTOBUF_FINAL { return New(NULL); }

  AttributeProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttributeProto& from);
  void MergeFrom(const AttributeProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttributeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AttributeProto_AttributeType AttributeType;
  static const AttributeType UNDEFINED =
    AttributeProto_AttributeType_UNDEFINED;
  static const AttributeType FLOAT =
    AttributeProto_AttributeType_FLOAT;
  static const AttributeType INT =
    AttributeProto_AttributeType_INT;
  static const AttributeType STRING =
    AttributeProto_AttributeType_STRING;
  static const AttributeType TENSOR =
    AttributeProto_AttributeType_TENSOR;
  static const AttributeType GRAPH =
    AttributeProto_AttributeType_GRAPH;
  static const AttributeType FLOATS =
    AttributeProto_AttributeType_FLOATS;
  static const AttributeType INTS =
    AttributeProto_AttributeType_INTS;
  static const AttributeType STRINGS =
    AttributeProto_AttributeType_STRINGS;
  static const AttributeType TENSORS =
    AttributeProto_AttributeType_TENSORS;
  static const AttributeType GRAPHS =
    AttributeProto_AttributeType_GRAPHS;
  static inline bool AttributeType_IsValid(int value) {
    return AttributeProto_AttributeType_IsValid(value);
  }
  static const AttributeType AttributeType_MIN =
    AttributeProto_AttributeType_AttributeType_MIN;
  static const AttributeType AttributeType_MAX =
    AttributeProto_AttributeType_AttributeType_MAX;
  static const int AttributeType_ARRAYSIZE =
    AttributeProto_AttributeType_AttributeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AttributeType_descriptor() {
    return AttributeProto_AttributeType_descriptor();
  }
  static inline const ::std::string& AttributeType_Name(AttributeType value) {
    return AttributeProto_AttributeType_Name(value);
  }
  static inline bool AttributeType_Parse(const ::std::string& name,
      AttributeType* value) {
    return AttributeProto_AttributeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float floats = 7;
  int floats_size() const;
  void clear_floats();
  static const int kFloatsFieldNumber = 7;
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::google::protobuf::RepeatedField< float >&
      floats() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_floats();

  // repeated int64 ints = 8;
  int ints_size() const;
  void clear_ints();
  static const int kIntsFieldNumber = 8;
  ::google::protobuf::int64 ints(int index) const;
  void set_ints(int index, ::google::protobuf::int64 value);
  void add_ints(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ints();

  // repeated bytes strings = 9;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 9;
  const ::std::string& strings(int index) const;
  ::std::string* mutable_strings(int index);
  void set_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_strings(int index, ::std::string&& value);
  #endif
  void set_strings(int index, const char* value);
  void set_strings(int index, const void* value, size_t size);
  ::std::string* add_strings();
  void add_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_strings(::std::string&& value);
  #endif
  void add_strings(const char* value);
  void add_strings(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // repeated .onnx.TensorProto tensors = 10;
  int tensors_size() const;
  void clear_tensors();
  static const int kTensorsFieldNumber = 10;
  const ::onnx::TensorProto& tensors(int index) const;
  ::onnx::TensorProto* mutable_tensors(int index);
  ::onnx::TensorProto* add_tensors();
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_tensors();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      tensors() const;

  // repeated .onnx.GraphProto graphs = 11;
  int graphs_size() const;
  void clear_graphs();
  static const int kGraphsFieldNumber = 11;
  const ::onnx::GraphProto& graphs(int index) const;
  ::onnx::GraphProto* mutable_graphs(int index);
  ::onnx::GraphProto* add_graphs();
  ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
      mutable_graphs();
  const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
      graphs() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes s = 4;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 4;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // optional .onnx.TensorProto t = 5;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 5;
  const ::onnx::TensorProto& t() const;
  ::onnx::TensorProto* mutable_t();
  ::onnx::TensorProto* release_t();
  void set_allocated_t(::onnx::TensorProto* t);

  // optional .onnx.GraphProto g = 6;
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 6;
  const ::onnx::GraphProto& g() const;
  ::onnx::GraphProto* mutable_g();
  ::onnx::GraphProto* release_g();
  void set_allocated_g(::onnx::GraphProto* g);

  // optional int64 i = 3;
  bool has_i() const;
  void clear_i();
  static const int kIFieldNumber = 3;
  ::google::protobuf::int64 i() const;
  void set_i(::google::protobuf::int64 value);

  // optional float f = 2;
  bool has_f() const;
  void clear_f();
  static const int kFFieldNumber = 2;
  float f() const;
  void set_f(float value);

  // optional .onnx.AttributeProto.AttributeType type = 20;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::onnx::AttributeProto_AttributeType type() const;
  void set_type(::onnx::AttributeProto_AttributeType value);

  // @@protoc_insertion_point(class_scope:onnx.AttributeProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_f();
  void clear_has_f();
  void set_has_i();
  void clear_has_i();
  void set_has_s();
  void clear_has_s();
  void set_has_t();
  void clear_has_t();
  void set_has_g();
  void clear_has_g();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > floats_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > tensors_;
  ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto > graphs_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::onnx::TensorProto* t_;
  ::onnx::GraphProto* g_;
  ::google::protobuf::int64 i_;
  float f_;
  int type_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueInfoProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.ValueInfoProto) */ {
 public:
  ValueInfoProto();
  virtual ~ValueInfoProto();

  ValueInfoProto(const ValueInfoProto& from);

  inline ValueInfoProto& operator=(const ValueInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueInfoProto(ValueInfoProto&& from) noexcept
    : ValueInfoProto() {
    *this = ::std::move(from);
  }

  inline ValueInfoProto& operator=(ValueInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueInfoProto& default_instance();

  static inline const ValueInfoProto* internal_default_instance() {
    return reinterpret_cast<const ValueInfoProto*>(
               &_ValueInfoProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ValueInfoProto* other);
  friend void swap(ValueInfoProto& a, ValueInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueInfoProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ValueInfoProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValueInfoProto& from);
  void MergeFrom(const ValueInfoProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValueInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .onnx.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::onnx::TypeProto& type() const;
  ::onnx::TypeProto* mutable_type();
  ::onnx::TypeProto* release_type();
  void set_allocated_type(::onnx::TypeProto* type);

  // @@protoc_insertion_point(class_scope:onnx.ValueInfoProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::onnx::TypeProto* type_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.NodeProto) */ {
 public:
  NodeProto();
  virtual ~NodeProto();

  NodeProto(const NodeProto& from);

  inline NodeProto& operator=(const NodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeProto(NodeProto&& from) noexcept
    : NodeProto() {
    *this = ::std::move(from);
  }

  inline NodeProto& operator=(NodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeProto& default_instance();

  static inline const NodeProto* internal_default_instance() {
    return reinterpret_cast<const NodeProto*>(
               &_NodeProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NodeProto* other);
  friend void swap(NodeProto& a, NodeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeProto* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeProto& from);
  void MergeFrom(const NodeProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input = 1;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input(int index, ::std::string&& value);
  #endif
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  #if LANG_CXX11
  void add_input(::std::string&& value);
  #endif
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 2;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output(int index, ::std::string&& value);
  #endif
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  #if LANG_CXX11
  void add_output(::std::string&& value);
  #endif
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // repeated .onnx.AttributeProto attribute = 5;
  int attribute_size() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  const ::onnx::AttributeProto& attribute(int index) const;
  ::onnx::AttributeProto* mutable_attribute(int index);
  ::onnx::AttributeProto* add_attribute();
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
      mutable_attribute();
  const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
      attribute() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string op_type = 4;
  bool has_op_type() const;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 4;
  const ::std::string& op_type() const;
  void set_op_type(const ::std::string& value);
  #if LANG_CXX11
  void set_op_type(::std::string&& value);
  #endif
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  ::std::string* mutable_op_type();
  ::std::string* release_op_type();
  void set_allocated_op_type(::std::string* op_type);

  // optional string doc_string = 6;
  bool has_doc_string() const;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:onnx.NodeProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_op_type();
  void clear_has_op_type();
  void set_has_doc_string();
  void clear_has_doc_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto > attribute_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr op_type_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModelProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.ModelProto) */ {
 public:
  ModelProto();
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelProto(ModelProto&& from) noexcept
    : ModelProto() {
    *this = ::std::move(from);
  }

  inline ModelProto& operator=(ModelProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelProto& default_instance();

  static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ModelProto* other);
  friend void swap(ModelProto& a, ModelProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelProto* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModelProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string producer_name = 2;
  bool has_producer_name() const;
  void clear_producer_name();
  static const int kProducerNameFieldNumber = 2;
  const ::std::string& producer_name() const;
  void set_producer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_name(::std::string&& value);
  #endif
  void set_producer_name(const char* value);
  void set_producer_name(const char* value, size_t size);
  ::std::string* mutable_producer_name();
  ::std::string* release_producer_name();
  void set_allocated_producer_name(::std::string* producer_name);

  // optional string producer_version = 3;
  bool has_producer_version() const;
  void clear_producer_version();
  static const int kProducerVersionFieldNumber = 3;
  const ::std::string& producer_version() const;
  void set_producer_version(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_version(::std::string&& value);
  #endif
  void set_producer_version(const char* value);
  void set_producer_version(const char* value, size_t size);
  ::std::string* mutable_producer_version();
  ::std::string* release_producer_version();
  void set_allocated_producer_version(::std::string* producer_version);

  // optional string domain = 4;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 4;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // optional string doc_string = 6;
  bool has_doc_string() const;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // optional .onnx.GraphProto graph = 7;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 7;
  const ::onnx::GraphProto& graph() const;
  ::onnx::GraphProto* mutable_graph();
  ::onnx::GraphProto* release_graph();
  void set_allocated_graph(::onnx::GraphProto* graph);

  // optional int64 ir_version = 1;
  bool has_ir_version() const;
  void clear_ir_version();
  static const int kIrVersionFieldNumber = 1;
  ::google::protobuf::int64 ir_version() const;
  void set_ir_version(::google::protobuf::int64 value);

  // optional int64 model_version = 5;
  bool has_model_version() const;
  void clear_model_version();
  static const int kModelVersionFieldNumber = 5;
  ::google::protobuf::int64 model_version() const;
  void set_model_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.ModelProto)
 private:
  void set_has_ir_version();
  void clear_has_ir_version();
  void set_has_producer_name();
  void clear_has_producer_name();
  void set_has_producer_version();
  void clear_has_producer_version();
  void set_has_domain();
  void clear_has_domain();
  void set_has_model_version();
  void clear_has_model_version();
  void set_has_doc_string();
  void clear_has_doc_string();
  void set_has_graph();
  void clear_has_graph();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr producer_name_;
  ::google::protobuf::internal::ArenaStringPtr producer_version_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::onnx::GraphProto* graph_;
  ::google::protobuf::int64 ir_version_;
  ::google::protobuf::int64 model_version_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.GraphProto) */ {
 public:
  GraphProto();
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphProto(GraphProto&& from) noexcept
    : GraphProto() {
    *this = ::std::move(from);
  }

  inline GraphProto& operator=(GraphProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphProto& default_instance();

  static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GraphProto* other);
  friend void swap(GraphProto& a, GraphProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphProto* New() const PROTOBUF_FINAL { return New(NULL); }

  GraphProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GraphProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .onnx.NodeProto node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::onnx::NodeProto& node(int index) const;
  ::onnx::NodeProto* mutable_node(int index);
  ::onnx::NodeProto* add_node();
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
      node() const;

  // repeated .onnx.TensorProto initializer = 5;
  int initializer_size() const;
  void clear_initializer();
  static const int kInitializerFieldNumber = 5;
  const ::onnx::TensorProto& initializer(int index) const;
  ::onnx::TensorProto* mutable_initializer(int index);
  ::onnx::TensorProto* add_initializer();
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_initializer();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      initializer() const;

  // repeated .onnx.ValueInfoProto input = 11;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 11;
  const ::onnx::ValueInfoProto& input(int index) const;
  ::onnx::ValueInfoProto* mutable_input(int index);
  ::onnx::ValueInfoProto* add_input();
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_input();
  const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      input() const;

  // repeated .onnx.ValueInfoProto output = 12;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 12;
  const ::onnx::ValueInfoProto& output(int index) const;
  ::onnx::ValueInfoProto* mutable_output(int index);
  ::onnx::ValueInfoProto* add_output();
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_output();
  const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      output() const;

  // repeated .onnx.ValueInfoProto value_info = 13;
  int value_info_size() const;
  void clear_value_info();
  static const int kValueInfoFieldNumber = 13;
  const ::onnx::ValueInfoProto& value_info(int index) const;
  ::onnx::ValueInfoProto* mutable_value_info(int index);
  ::onnx::ValueInfoProto* add_value_info();
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_value_info();
  const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      value_info() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string doc_string = 10;
  bool has_doc_string() const;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 10;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:onnx.GraphProto)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_doc_string();
  void clear_has_doc_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto > node_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > initializer_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > input_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > output_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > value_info_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TensorProto_Segment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TensorProto.Segment) */ {
 public:
  TensorProto_Segment();
  virtual ~TensorProto_Segment();

  TensorProto_Segment(const TensorProto_Segment& from);

  inline TensorProto_Segment& operator=(const TensorProto_Segment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto_Segment(TensorProto_Segment&& from) noexcept
    : TensorProto_Segment() {
    *this = ::std::move(from);
  }

  inline TensorProto_Segment& operator=(TensorProto_Segment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto_Segment& default_instance();

  static inline const TensorProto_Segment* internal_default_instance() {
    return reinterpret_cast<const TensorProto_Segment*>(
               &_TensorProto_Segment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TensorProto_Segment* other);
  friend void swap(TensorProto_Segment& a, TensorProto_Segment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto_Segment* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProto_Segment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProto_Segment& from);
  void MergeFrom(const TensorProto_Segment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProto_Segment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // optional int64 end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.TensorProto.Segment)
 private:
  void set_has_begin();
  void clear_has_begin();
  void set_has_end();
  void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorProto& default_instance();

  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TensorProto* other);
  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TensorProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TensorProto_Segment Segment;

  typedef TensorProto_DataType DataType;
  static const DataType UNDEFINED =
    TensorProto_DataType_UNDEFINED;
  static const DataType FLOAT =
    TensorProto_DataType_FLOAT;
  static const DataType UINT8 =
    TensorProto_DataType_UINT8;
  static const DataType INT8 =
    TensorProto_DataType_INT8;
  static const DataType UINT16 =
    TensorProto_DataType_UINT16;
  static const DataType INT16 =
    TensorProto_DataType_INT16;
  static const DataType INT32 =
    TensorProto_DataType_INT32;
  static const DataType INT64 =
    TensorProto_DataType_INT64;
  static const DataType STRING =
    TensorProto_DataType_STRING;
  static const DataType BOOL =
    TensorProto_DataType_BOOL;
  static const DataType FLOAT16 =
    TensorProto_DataType_FLOAT16;
  static const DataType DOUBLE =
    TensorProto_DataType_DOUBLE;
  static const DataType UINT32 =
    TensorProto_DataType_UINT32;
  static const DataType UINT64 =
    TensorProto_DataType_UINT64;
  static const DataType COMPLEX64 =
    TensorProto_DataType_COMPLEX64;
  static const DataType COMPLEX128 =
    TensorProto_DataType_COMPLEX128;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return TensorProto_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return TensorProto_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return TensorProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // repeated float float_data = 4 [packed = true];
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 4;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 5 [packed = true];
  int int32_data_size() const;
  void clear_int32_data();
  static const int kInt32DataFieldNumber = 5;
  ::google::protobuf::int32 int32_data(int index) const;
  void set_int32_data(int index, ::google::protobuf::int32 value);
  void add_int32_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // repeated bytes string_data = 6;
  int string_data_size() const;
  void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  const ::std::string& string_data(int index) const;
  ::std::string* mutable_string_data(int index);
  void set_string_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string_data(int index, ::std::string&& value);
  #endif
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const void* value, size_t size);
  ::std::string* add_string_data();
  void add_string_data(const ::std::string& value);
  #if LANG_CXX11
  void add_string_data(::std::string&& value);
  #endif
  void add_string_data(const char* value);
  void add_string_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // repeated int64 int64_data = 7 [packed = true];
  int int64_data_size() const;
  void clear_int64_data();
  static const int kInt64DataFieldNumber = 7;
  ::google::protobuf::int64 int64_data(int index) const;
  void set_int64_data(int index, ::google::protobuf::int64 value);
  void add_int64_data(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_data();

  // repeated double double_data = 10 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 10;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated uint64 uint64_data = 11 [packed = true];
  int uint64_data_size() const;
  void clear_uint64_data();
  static const int kUint64DataFieldNumber = 11;
  ::google::protobuf::uint64 uint64_data(int index) const;
  void set_uint64_data(int index, ::google::protobuf::uint64 value);
  void add_uint64_data(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uint64_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uint64_data();

  // optional string name = 8;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes raw_data = 9;
  bool has_raw_data() const;
  void clear_raw_data();
  static const int kRawDataFieldNumber = 9;
  const ::std::string& raw_data() const;
  void set_raw_data(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_data(::std::string&& value);
  #endif
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  ::std::string* mutable_raw_data();
  ::std::string* release_raw_data();
  void set_allocated_raw_data(::std::string* raw_data);

  // optional .onnx.TensorProto.Segment segment = 3;
  bool has_segment() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 3;
  const ::onnx::TensorProto_Segment& segment() const;
  ::onnx::TensorProto_Segment* mutable_segment();
  ::onnx::TensorProto_Segment* release_segment();
  void set_allocated_segment(::onnx::TensorProto_Segment* segment);

  // optional .onnx.TensorProto.DataType data_type = 2;
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::onnx::TensorProto_DataType data_type() const;
  void set_data_type(::onnx::TensorProto_DataType value);

  // @@protoc_insertion_point(class_scope:onnx.TensorProto)
 private:
  void set_has_data_type();
  void clear_has_data_type();
  void set_has_segment();
  void clear_has_segment();
  void set_has_name();
  void clear_has_name();
  void set_has_raw_data();
  void clear_has_raw_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  mutable int _int32_data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_data_;
  mutable int _int64_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uint64_data_;
  mutable int _uint64_data_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr raw_data_;
  ::onnx::TensorProto_Segment* segment_;
  int data_type_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SparseTensorProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.SparseTensorProto) */ {
 public:
  SparseTensorProto();
  virtual ~SparseTensorProto();

  SparseTensorProto(const SparseTensorProto& from);

  inline SparseTensorProto& operator=(const SparseTensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparseTensorProto(SparseTensorProto&& from) noexcept
    : SparseTensorProto() {
    *this = ::std::move(from);
  }

  inline SparseTensorProto& operator=(SparseTensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseTensorProto& default_instance();

  static inline const SparseTensorProto* internal_default_instance() {
    return reinterpret_cast<const SparseTensorProto*>(
               &_SparseTensorProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SparseTensorProto* other);
  friend void swap(SparseTensorProto& a, SparseTensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparseTensorProto* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseTensorProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparseTensorProto& from);
  void MergeFrom(const SparseTensorProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparseTensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // optional .onnx.TensorProto indices = 2;
  bool has_indices() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 2;
  const ::onnx::TensorProto& indices() const;
  ::onnx::TensorProto* mutable_indices();
  ::onnx::TensorProto* release_indices();
  void set_allocated_indices(::onnx::TensorProto* indices);

  // optional .onnx.TensorProto values = 3;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::onnx::TensorProto& values() const;
  ::onnx::TensorProto* mutable_values();
  ::onnx::TensorProto* release_values();
  void set_allocated_values(::onnx::TensorProto* values);

  // @@protoc_insertion_point(class_scope:onnx.SparseTensorProto)
 private:
  void set_has_indices();
  void clear_has_indices();
  void set_has_values();
  void clear_has_values();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::onnx::TensorProto* indices_;
  ::onnx::TensorProto* values_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_TensorShapeProto_Dimension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TypeProto.TensorShapeProto.Dimension) */ {
 public:
  TypeProto_TensorShapeProto_Dimension();
  virtual ~TypeProto_TensorShapeProto_Dimension();

  TypeProto_TensorShapeProto_Dimension(const TypeProto_TensorShapeProto_Dimension& from);

  inline TypeProto_TensorShapeProto_Dimension& operator=(const TypeProto_TensorShapeProto_Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_TensorShapeProto_Dimension(TypeProto_TensorShapeProto_Dimension&& from) noexcept
    : TypeProto_TensorShapeProto_Dimension() {
    *this = ::std::move(from);
  }

  inline TypeProto_TensorShapeProto_Dimension& operator=(TypeProto_TensorShapeProto_Dimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto_TensorShapeProto_Dimension& default_instance();

  enum ValueCase {
    kDimValue = 1,
    kDimParam = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const TypeProto_TensorShapeProto_Dimension* internal_default_instance() {
    return reinterpret_cast<const TypeProto_TensorShapeProto_Dimension*>(
               &_TypeProto_TensorShapeProto_Dimension_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TypeProto_TensorShapeProto_Dimension* other);
  friend void swap(TypeProto_TensorShapeProto_Dimension& a, TypeProto_TensorShapeProto_Dimension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_TensorShapeProto_Dimension* New() const PROTOBUF_FINAL { return New(NULL); }

  TypeProto_TensorShapeProto_Dimension* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypeProto_TensorShapeProto_Dimension& from);
  void MergeFrom(const TypeProto_TensorShapeProto_Dimension& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypeProto_TensorShapeProto_Dimension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 dim_value = 1;
  bool has_dim_value() const;
  void clear_dim_value();
  static const int kDimValueFieldNumber = 1;
  ::google::protobuf::int64 dim_value() const;
  void set_dim_value(::google::protobuf::int64 value);

  // optional string dim_param = 2;
  bool has_dim_param() const;
  void clear_dim_param();
  static const int kDimParamFieldNumber = 2;
  const ::std::string& dim_param() const;
  void set_dim_param(const ::std::string& value);
  #if LANG_CXX11
  void set_dim_param(::std::string&& value);
  #endif
  void set_dim_param(const char* value);
  void set_dim_param(const char* value, size_t size);
  ::std::string* mutable_dim_param();
  ::std::string* release_dim_param();
  void set_allocated_dim_param(::std::string* dim_param);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:onnx.TypeProto.TensorShapeProto.Dimension)
 private:
  void set_has_dim_value();
  void set_has_dim_param();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 dim_value_;
    ::google::protobuf::internal::ArenaStringPtr dim_param_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_TensorShapeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TypeProto.TensorShapeProto) */ {
 public:
  TypeProto_TensorShapeProto();
  virtual ~TypeProto_TensorShapeProto();

  TypeProto_TensorShapeProto(const TypeProto_TensorShapeProto& from);

  inline TypeProto_TensorShapeProto& operator=(const TypeProto_TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_TensorShapeProto(TypeProto_TensorShapeProto&& from) noexcept
    : TypeProto_TensorShapeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto_TensorShapeProto& operator=(TypeProto_TensorShapeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto_TensorShapeProto& default_instance();

  static inline const TypeProto_TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto_TensorShapeProto*>(
               &_TypeProto_TensorShapeProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TypeProto_TensorShapeProto* other);
  friend void swap(TypeProto_TensorShapeProto& a, TypeProto_TensorShapeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_TensorShapeProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TypeProto_TensorShapeProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypeProto_TensorShapeProto& from);
  void MergeFrom(const TypeProto_TensorShapeProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypeProto_TensorShapeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TypeProto_TensorShapeProto_Dimension Dimension;

  // accessors -------------------------------------------------------

  // repeated .onnx.TypeProto.TensorShapeProto.Dimension dim = 1;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  const ::onnx::TypeProto_TensorShapeProto_Dimension& dim(int index) const;
  ::onnx::TypeProto_TensorShapeProto_Dimension* mutable_dim(int index);
  ::onnx::TypeProto_TensorShapeProto_Dimension* add_dim();
  ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto_TensorShapeProto_Dimension >*
      mutable_dim();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto_TensorShapeProto_Dimension >&
      dim() const;

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.TensorShapeProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto_TensorShapeProto_Dimension > dim_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_TensorTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TypeProto.TensorTypeProto) */ {
 public:
  TypeProto_TensorTypeProto();
  virtual ~TypeProto_TensorTypeProto();

  TypeProto_TensorTypeProto(const TypeProto_TensorTypeProto& from);

  inline TypeProto_TensorTypeProto& operator=(const TypeProto_TensorTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_TensorTypeProto(TypeProto_TensorTypeProto&& from) noexcept
    : TypeProto_TensorTypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto_TensorTypeProto& operator=(TypeProto_TensorTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto_TensorTypeProto& default_instance();

  static inline const TypeProto_TensorTypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto_TensorTypeProto*>(
               &_TypeProto_TensorTypeProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TypeProto_TensorTypeProto* other);
  friend void swap(TypeProto_TensorTypeProto& a, TypeProto_TensorTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_TensorTypeProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TypeProto_TensorTypeProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypeProto_TensorTypeProto& from);
  void MergeFrom(const TypeProto_TensorTypeProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypeProto_TensorTypeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .onnx.TypeProto.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::onnx::TypeProto_TensorShapeProto& shape() const;
  ::onnx::TypeProto_TensorShapeProto* mutable_shape();
  ::onnx::TypeProto_TensorShapeProto* release_shape();
  void set_allocated_shape(::onnx::TypeProto_TensorShapeProto* shape);

  // optional .onnx.TensorProto.DataType elem_type = 1;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  ::onnx::TensorProto_DataType elem_type() const;
  void set_elem_type(::onnx::TensorProto_DataType value);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.TensorTypeProto)
 private:
  void set_has_elem_type();
  void clear_has_elem_type();
  void set_has_shape();
  void clear_has_shape();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::onnx::TypeProto_TensorShapeProto* shape_;
  int elem_type_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_SparseTensorTypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TypeProto.SparseTensorTypeProto) */ {
 public:
  TypeProto_SparseTensorTypeProto();
  virtual ~TypeProto_SparseTensorTypeProto();

  TypeProto_SparseTensorTypeProto(const TypeProto_SparseTensorTypeProto& from);

  inline TypeProto_SparseTensorTypeProto& operator=(const TypeProto_SparseTensorTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_SparseTensorTypeProto(TypeProto_SparseTensorTypeProto&& from) noexcept
    : TypeProto_SparseTensorTypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto_SparseTensorTypeProto& operator=(TypeProto_SparseTensorTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto_SparseTensorTypeProto& default_instance();

  static inline const TypeProto_SparseTensorTypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto_SparseTensorTypeProto*>(
               &_TypeProto_SparseTensorTypeProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TypeProto_SparseTensorTypeProto* other);
  friend void swap(TypeProto_SparseTensorTypeProto& a, TypeProto_SparseTensorTypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_SparseTensorTypeProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TypeProto_SparseTensorTypeProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypeProto_SparseTensorTypeProto& from);
  void MergeFrom(const TypeProto_SparseTensorTypeProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypeProto_SparseTensorTypeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .onnx.TypeProto.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  const ::onnx::TypeProto_TensorShapeProto& shape() const;
  ::onnx::TypeProto_TensorShapeProto* mutable_shape();
  ::onnx::TypeProto_TensorShapeProto* release_shape();
  void set_allocated_shape(::onnx::TypeProto_TensorShapeProto* shape);

  // optional .onnx.TensorProto.DataType elem_type = 1;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  ::onnx::TensorProto_DataType elem_type() const;
  void set_elem_type(::onnx::TensorProto_DataType value);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.SparseTensorTypeProto)
 private:
  void set_has_elem_type();
  void clear_has_elem_type();
  void set_has_shape();
  void clear_has_shape();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::onnx::TypeProto_TensorShapeProto* shape_;
  int elem_type_;
  friend struct protobuf_onnx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onnx.TypeProto) */ {
 public:
  TypeProto();
  virtual ~TypeProto();

  TypeProto(const TypeProto& from);

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto(TypeProto&& from) noexcept
    : TypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto& operator=(TypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeProto& default_instance();

  enum ValueCase {
    kTensorType = 1,
    kSparseTensorType = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TypeProto* other);
  friend void swap(TypeProto& a, TypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto* New() const PROTOBUF_FINAL { return New(NULL); }

  TypeProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TypeProto& from);
  void MergeFrom(const TypeProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TypeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TypeProto_TensorShapeProto TensorShapeProto;
  typedef TypeProto_TensorTypeProto TensorTypeProto;
  typedef TypeProto_SparseTensorTypeProto SparseTensorTypeProto;

  // accessors -------------------------------------------------------

  // optional .onnx.TypeProto.TensorTypeProto tensor_type = 1;
  bool has_tensor_type() const;
  void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 1;
  const ::onnx::TypeProto_TensorTypeProto& tensor_type() const;
  ::onnx::TypeProto_TensorTypeProto* mutable_tensor_type();
  ::onnx::TypeProto_TensorTypeProto* release_tensor_type();
  void set_allocated_tensor_type(::onnx::TypeProto_TensorTypeProto* tensor_type);

  // optional .onnx.TypeProto.SparseTensorTypeProto sparse_tensor_type = 2;
  bool has_sparse_tensor_type() const;
  void clear_sparse_tensor_type();
  static const int kSparseTensorTypeFieldNumber = 2;
  const ::onnx::TypeProto_SparseTensorTypeProto& sparse_tensor_type() const;
  ::onnx::TypeProto_SparseTensorTypeProto* mutable_sparse_tensor_type();
  ::onnx::TypeProto_SparseTensorTypeProto* release_sparse_tensor_type();
  void set_allocated_sparse_tensor_type(::onnx::TypeProto_SparseTensorTypeProto* sparse_tensor_type);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:onnx.TypeProto)
 private:
  void set_has_tensor_type();
  void set_has_sparse_tensor_type();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::onnx::TypeProto_TensorTypeProto* tensor_type_;
    ::onnx::TypeProto_SparseTensorTypeProto* sparse_tensor_type_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_onnx_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttributeProto

// optional string name = 1;
inline bool AttributeProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttributeProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttributeProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttributeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.name)
  return name_.GetNoArena();
}
inline void AttributeProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.name)
}
#if LANG_CXX11
inline void AttributeProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.AttributeProto.name)
}
#endif
inline void AttributeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.name)
}
inline ::std::string* AttributeProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.name)
}

// optional .onnx.AttributeProto.AttributeType type = 20;
inline bool AttributeProto::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AttributeProto::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AttributeProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AttributeProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::onnx::AttributeProto_AttributeType AttributeProto::type() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.type)
  return static_cast< ::onnx::AttributeProto_AttributeType >(type_);
}
inline void AttributeProto::set_type(::onnx::AttributeProto_AttributeType value) {
  assert(::onnx::AttributeProto_AttributeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.type)
}

// optional float f = 2;
inline bool AttributeProto::has_f() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AttributeProto::set_has_f() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AttributeProto::clear_has_f() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AttributeProto::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline float AttributeProto::f() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.f)
  return f_;
}
inline void AttributeProto::set_f(float value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.f)
}

// optional int64 i = 3;
inline bool AttributeProto::has_i() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AttributeProto::set_has_i() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AttributeProto::clear_has_i() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AttributeProto::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
  clear_has_i();
}
inline ::google::protobuf::int64 AttributeProto::i() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.i)
  return i_;
}
inline void AttributeProto::set_i(::google::protobuf::int64 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.i)
}

// optional bytes s = 4;
inline bool AttributeProto::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttributeProto::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttributeProto::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttributeProto::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s();
}
inline const ::std::string& AttributeProto::s() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.s)
  return s_.GetNoArena();
}
inline void AttributeProto::set_s(const ::std::string& value) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.s)
}
#if LANG_CXX11
inline void AttributeProto::set_s(::std::string&& value) {
  set_has_s();
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.AttributeProto.s)
}
#endif
inline void AttributeProto::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.s)
}
inline void AttributeProto::set_s(const void* value, size_t size) {
  set_has_s();
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.s)
}
inline ::std::string* AttributeProto::mutable_s() {
  set_has_s();
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeProto::release_s() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.s)
  clear_has_s();
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    set_has_s();
  } else {
    clear_has_s();
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.s)
}

// optional .onnx.TensorProto t = 5;
inline bool AttributeProto::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttributeProto::set_has_t() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttributeProto::clear_has_t() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttributeProto::clear_t() {
  if (t_ != NULL) t_->::onnx::TensorProto::Clear();
  clear_has_t();
}
inline const ::onnx::TensorProto& AttributeProto::t() const {
  const ::onnx::TensorProto* p = t_;
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.t)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto*>(
      &::onnx::_TensorProto_default_instance_);
}
inline ::onnx::TensorProto* AttributeProto::mutable_t() {
  set_has_t();
  if (t_ == NULL) {
    t_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.t)
  return t_;
}
inline ::onnx::TensorProto* AttributeProto::release_t() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.t)
  clear_has_t();
  ::onnx::TensorProto* temp = t_;
  t_ = NULL;
  return temp;
}
inline void AttributeProto::set_allocated_t(::onnx::TensorProto* t) {
  delete t_;
  t_ = t;
  if (t) {
    set_has_t();
  } else {
    clear_has_t();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.t)
}

// optional .onnx.GraphProto g = 6;
inline bool AttributeProto::has_g() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttributeProto::set_has_g() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttributeProto::clear_has_g() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttributeProto::clear_g() {
  if (g_ != NULL) g_->::onnx::GraphProto::Clear();
  clear_has_g();
}
inline const ::onnx::GraphProto& AttributeProto::g() const {
  const ::onnx::GraphProto* p = g_;
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.g)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::GraphProto*>(
      &::onnx::_GraphProto_default_instance_);
}
inline ::onnx::GraphProto* AttributeProto::mutable_g() {
  set_has_g();
  if (g_ == NULL) {
    g_ = new ::onnx::GraphProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.g)
  return g_;
}
inline ::onnx::GraphProto* AttributeProto::release_g() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.g)
  clear_has_g();
  ::onnx::GraphProto* temp = g_;
  g_ = NULL;
  return temp;
}
inline void AttributeProto::set_allocated_g(::onnx::GraphProto* g) {
  delete g_;
  g_ = g;
  if (g) {
    set_has_g();
  } else {
    clear_has_g();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.g)
}

// repeated float floats = 7;
inline int AttributeProto::floats_size() const {
  return floats_.size();
}
inline void AttributeProto::clear_floats() {
  floats_.Clear();
}
inline float AttributeProto::floats(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.floats)
  return floats_.Get(index);
}
inline void AttributeProto::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.floats)
}
inline void AttributeProto::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.floats)
}
inline const ::google::protobuf::RepeatedField< float >&
AttributeProto::floats() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.floats)
  return floats_;
}
inline ::google::protobuf::RepeatedField< float >*
AttributeProto::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.floats)
  return &floats_;
}

// repeated int64 ints = 8;
inline int AttributeProto::ints_size() const {
  return ints_.size();
}
inline void AttributeProto::clear_ints() {
  ints_.Clear();
}
inline ::google::protobuf::int64 AttributeProto::ints(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ints)
  return ints_.Get(index);
}
inline void AttributeProto::set_ints(int index, ::google::protobuf::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ints)
}
inline void AttributeProto::add_ints(::google::protobuf::int64 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AttributeProto::ints() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.ints)
  return ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AttributeProto::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.ints)
  return &ints_;
}

// repeated bytes strings = 9;
inline int AttributeProto::strings_size() const {
  return strings_.size();
}
inline void AttributeProto::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& AttributeProto::strings(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.strings)
  return strings_.Get(index);
}
inline ::std::string* AttributeProto::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.strings)
  return strings_.Mutable(index);
}
inline void AttributeProto::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.strings)
  strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AttributeProto::set_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AttributeProto::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.strings)
}
inline ::std::string* AttributeProto::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:onnx.AttributeProto.strings)
  return strings_.Add();
}
inline void AttributeProto::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.strings)
}
#if LANG_CXX11
inline void AttributeProto::add_strings(::std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.strings)
}
#endif
inline void AttributeProto::add_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.AttributeProto.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AttributeProto::strings() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AttributeProto::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.strings)
  return &strings_;
}

// repeated .onnx.TensorProto tensors = 10;
inline int AttributeProto::tensors_size() const {
  return tensors_.size();
}
inline void AttributeProto::clear_tensors() {
  tensors_.Clear();
}
inline const ::onnx::TensorProto& AttributeProto::tensors(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.tensors)
  return tensors_.Get(index);
}
inline ::onnx::TensorProto* AttributeProto::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.tensors)
  return tensors_.Mutable(index);
}
inline ::onnx::TensorProto* AttributeProto::add_tensors() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.tensors)
  return tensors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
AttributeProto::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.tensors)
  return &tensors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
AttributeProto::tensors() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.tensors)
  return tensors_;
}

// repeated .onnx.GraphProto graphs = 11;
inline int AttributeProto::graphs_size() const {
  return graphs_.size();
}
inline void AttributeProto::clear_graphs() {
  graphs_.Clear();
}
inline const ::onnx::GraphProto& AttributeProto::graphs(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.graphs)
  return graphs_.Get(index);
}
inline ::onnx::GraphProto* AttributeProto::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.graphs)
  return graphs_.Mutable(index);
}
inline ::onnx::GraphProto* AttributeProto::add_graphs() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.graphs)
  return graphs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
AttributeProto::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.graphs)
  return &graphs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
AttributeProto::graphs() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.graphs)
  return graphs_;
}

// -------------------------------------------------------------------

// ValueInfoProto

// optional string name = 1;
inline bool ValueInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueInfoProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValueInfoProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValueInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ValueInfoProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.name)
  return name_.GetNoArena();
}
inline void ValueInfoProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.name)
}
#if LANG_CXX11
inline void ValueInfoProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ValueInfoProto.name)
}
#endif
inline void ValueInfoProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.name)
}
inline void ValueInfoProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.name)
}
inline ::std::string* ValueInfoProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueInfoProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.name)
}

// optional .onnx.TypeProto type = 2;
inline bool ValueInfoProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueInfoProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValueInfoProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValueInfoProto::clear_type() {
  if (type_ != NULL) type_->::onnx::TypeProto::Clear();
  clear_has_type();
}
inline const ::onnx::TypeProto& ValueInfoProto::type() const {
  const ::onnx::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto*>(
      &::onnx::_TypeProto_default_instance_);
}
inline ::onnx::TypeProto* ValueInfoProto::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    type_ = new ::onnx::TypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.type)
  return type_;
}
inline ::onnx::TypeProto* ValueInfoProto::release_type() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.type)
  clear_has_type();
  ::onnx::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline void ValueInfoProto::set_allocated_type(::onnx::TypeProto* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.type)
}

// -------------------------------------------------------------------

// NodeProto

// repeated string input = 1;
inline int NodeProto::input_size() const {
  return input_.size();
}
inline void NodeProto::clear_input() {
  input_.Clear();
}
inline const ::std::string& NodeProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.input)
  return input_.Get(index);
}
inline ::std::string* NodeProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.input)
  return input_.Mutable(index);
}
inline void NodeProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeProto::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeProto::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.input)
}
inline void NodeProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.input)
}
inline ::std::string* NodeProto::add_input() {
  // @@protoc_insertion_point(field_add_mutable:onnx.NodeProto.input)
  return input_.Add();
}
inline void NodeProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.input)
}
#if LANG_CXX11
inline void NodeProto::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.NodeProto.input)
}
#endif
inline void NodeProto::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.input)
}
inline void NodeProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.input)
  return &input_;
}

// repeated string output = 2;
inline int NodeProto::output_size() const {
  return output_.size();
}
inline void NodeProto::clear_output() {
  output_.Clear();
}
inline const ::std::string& NodeProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.output)
  return output_.Get(index);
}
inline ::std::string* NodeProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.output)
  return output_.Mutable(index);
}
inline void NodeProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeProto::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeProto::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.output)
}
inline void NodeProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.output)
}
inline ::std::string* NodeProto::add_output() {
  // @@protoc_insertion_point(field_add_mutable:onnx.NodeProto.output)
  return output_.Add();
}
inline void NodeProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.output)
}
#if LANG_CXX11
inline void NodeProto::add_output(::std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.NodeProto.output)
}
#endif
inline void NodeProto::add_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.output)
}
inline void NodeProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.output)
  return &output_;
}

// optional string name = 3;
inline bool NodeProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.name)
  return name_.GetNoArena();
}
inline void NodeProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.name)
}
#if LANG_CXX11
inline void NodeProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.name)
}
#endif
inline void NodeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.name)
}
inline void NodeProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.name)
}
inline ::std::string* NodeProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.name)
}

// optional string op_type = 4;
inline bool NodeProto::has_op_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeProto::set_has_op_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeProto::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeProto::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_op_type();
}
inline const ::std::string& NodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.op_type)
  return op_type_.GetNoArena();
}
inline void NodeProto::set_op_type(const ::std::string& value) {
  set_has_op_type();
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.op_type)
}
#if LANG_CXX11
inline void NodeProto::set_op_type(::std::string&& value) {
  set_has_op_type();
  op_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.op_type)
}
#endif
inline void NodeProto::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_op_type();
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value, size_t size) {
  set_has_op_type();
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.op_type)
}
inline ::std::string* NodeProto::mutable_op_type() {
  set_has_op_type();
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.op_type)
  return op_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_op_type() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.op_type)
  clear_has_op_type();
  return op_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    set_has_op_type();
  } else {
    clear_has_op_type();
  }
  op_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.op_type)
}

// repeated .onnx.AttributeProto attribute = 5;
inline int NodeProto::attribute_size() const {
  return attribute_.size();
}
inline void NodeProto::clear_attribute() {
  attribute_.Clear();
}
inline const ::onnx::AttributeProto& NodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.attribute)
  return attribute_.Get(index);
}
inline ::onnx::AttributeProto* NodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.attribute)
  return attribute_.Mutable(index);
}
inline ::onnx::AttributeProto* NodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:onnx.NodeProto.attribute)
  return attribute_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
NodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.attribute)
  return &attribute_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
NodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.attribute)
  return attribute_;
}

// optional string doc_string = 6;
inline bool NodeProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_string();
}
inline const ::std::string& NodeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void NodeProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.doc_string)
}
#if LANG_CXX11
inline void NodeProto::set_doc_string(::std::string&& value) {
  set_has_doc_string();
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.doc_string)
}
#endif
inline void NodeProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.doc_string)
}
inline void NodeProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.doc_string)
}
inline ::std::string* NodeProto::mutable_doc_string() {
  set_has_doc_string();
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.doc_string)
  clear_has_doc_string();
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    set_has_doc_string();
  } else {
    clear_has_doc_string();
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.doc_string)
}

// -------------------------------------------------------------------

// ModelProto

// optional int64 ir_version = 1;
inline bool ModelProto::has_ir_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModelProto::set_has_ir_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModelProto::clear_has_ir_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModelProto::clear_ir_version() {
  ir_version_ = GOOGLE_LONGLONG(0);
  clear_has_ir_version();
}
inline ::google::protobuf::int64 ModelProto::ir_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.ir_version)
  return ir_version_;
}
inline void ModelProto::set_ir_version(::google::protobuf::int64 value) {
  set_has_ir_version();
  ir_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.ir_version)
}

// optional string producer_name = 2;
inline bool ModelProto::has_producer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelProto::set_has_producer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelProto::clear_has_producer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelProto::clear_producer_name() {
  producer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_producer_name();
}
inline const ::std::string& ModelProto::producer_name() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_name)
  return producer_name_.GetNoArena();
}
inline void ModelProto::set_producer_name(const ::std::string& value) {
  set_has_producer_name();
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_name)
}
#if LANG_CXX11
inline void ModelProto::set_producer_name(::std::string&& value) {
  set_has_producer_name();
  producer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.producer_name)
}
#endif
inline void ModelProto::set_producer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_producer_name();
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_name)
}
inline void ModelProto::set_producer_name(const char* value, size_t size) {
  set_has_producer_name();
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_name)
}
inline ::std::string* ModelProto::mutable_producer_name() {
  set_has_producer_name();
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_name)
  return producer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_producer_name() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.producer_name)
  clear_has_producer_name();
  return producer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_producer_name(::std::string* producer_name) {
  if (producer_name != NULL) {
    set_has_producer_name();
  } else {
    clear_has_producer_name();
  }
  producer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_name)
}

// optional string producer_version = 3;
inline bool ModelProto::has_producer_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelProto::set_has_producer_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelProto::clear_has_producer_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelProto::clear_producer_version() {
  producer_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_producer_version();
}
inline const ::std::string& ModelProto::producer_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_version)
  return producer_version_.GetNoArena();
}
inline void ModelProto::set_producer_version(const ::std::string& value) {
  set_has_producer_version();
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_version)
}
#if LANG_CXX11
inline void ModelProto::set_producer_version(::std::string&& value) {
  set_has_producer_version();
  producer_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.producer_version)
}
#endif
inline void ModelProto::set_producer_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_producer_version();
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_version)
}
inline void ModelProto::set_producer_version(const char* value, size_t size) {
  set_has_producer_version();
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_version)
}
inline ::std::string* ModelProto::mutable_producer_version() {
  set_has_producer_version();
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_version)
  return producer_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_producer_version() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.producer_version)
  clear_has_producer_version();
  return producer_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_producer_version(::std::string* producer_version) {
  if (producer_version != NULL) {
    set_has_producer_version();
  } else {
    clear_has_producer_version();
  }
  producer_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_version);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_version)
}

// optional string domain = 4;
inline bool ModelProto::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelProto::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelProto::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& ModelProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.domain)
  return domain_.GetNoArena();
}
inline void ModelProto::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.domain)
}
#if LANG_CXX11
inline void ModelProto::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.domain)
}
#endif
inline void ModelProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.domain)
}
inline ::std::string* ModelProto::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.domain)
}

// optional int64 model_version = 5;
inline bool ModelProto::has_model_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModelProto::set_has_model_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModelProto::clear_has_model_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModelProto::clear_model_version() {
  model_version_ = GOOGLE_LONGLONG(0);
  clear_has_model_version();
}
inline ::google::protobuf::int64 ModelProto::model_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.model_version)
  return model_version_;
}
inline void ModelProto::set_model_version(::google::protobuf::int64 value) {
  set_has_model_version();
  model_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.model_version)
}

// optional string doc_string = 6;
inline bool ModelProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_string();
}
inline const ::std::string& ModelProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void ModelProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.doc_string)
}
#if LANG_CXX11
inline void ModelProto::set_doc_string(::std::string&& value) {
  set_has_doc_string();
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.doc_string)
}
#endif
inline void ModelProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.doc_string)
}
inline void ModelProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.doc_string)
}
inline ::std::string* ModelProto::mutable_doc_string() {
  set_has_doc_string();
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.doc_string)
  clear_has_doc_string();
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    set_has_doc_string();
  } else {
    clear_has_doc_string();
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.doc_string)
}

// optional .onnx.GraphProto graph = 7;
inline bool ModelProto::has_graph() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModelProto::set_has_graph() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModelProto::clear_has_graph() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModelProto::clear_graph() {
  if (graph_ != NULL) graph_->::onnx::GraphProto::Clear();
  clear_has_graph();
}
inline const ::onnx::GraphProto& ModelProto::graph() const {
  const ::onnx::GraphProto* p = graph_;
  // @@protoc_insertion_point(field_get:onnx.ModelProto.graph)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::GraphProto*>(
      &::onnx::_GraphProto_default_instance_);
}
inline ::onnx::GraphProto* ModelProto::mutable_graph() {
  set_has_graph();
  if (graph_ == NULL) {
    graph_ = new ::onnx::GraphProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.graph)
  return graph_;
}
inline ::onnx::GraphProto* ModelProto::release_graph() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.graph)
  clear_has_graph();
  ::onnx::GraphProto* temp = graph_;
  graph_ = NULL;
  return temp;
}
inline void ModelProto::set_allocated_graph(::onnx::GraphProto* graph) {
  delete graph_;
  graph_ = graph;
  if (graph) {
    set_has_graph();
  } else {
    clear_has_graph();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.graph)
}

// -------------------------------------------------------------------

// GraphProto

// repeated .onnx.NodeProto node = 1;
inline int GraphProto::node_size() const {
  return node_.size();
}
inline void GraphProto::clear_node() {
  node_.Clear();
}
inline const ::onnx::NodeProto& GraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.node)
  return node_.Get(index);
}
inline ::onnx::NodeProto* GraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.node)
  return node_.Mutable(index);
}
inline ::onnx::NodeProto* GraphProto::add_node() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
GraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
GraphProto::node() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.node)
  return node_;
}

// optional string name = 2;
inline bool GraphProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.name)
  return name_.GetNoArena();
}
inline void GraphProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.name)
}
#if LANG_CXX11
inline void GraphProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.GraphProto.name)
}
#endif
inline void GraphProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.name)
}
inline void GraphProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.name)
}
inline ::std::string* GraphProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.GraphProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.name)
}

// repeated .onnx.TensorProto initializer = 5;
inline int GraphProto::initializer_size() const {
  return initializer_.size();
}
inline void GraphProto::clear_initializer() {
  initializer_.Clear();
}
inline const ::onnx::TensorProto& GraphProto::initializer(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.initializer)
  return initializer_.Get(index);
}
inline ::onnx::TensorProto* GraphProto::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.initializer)
  return initializer_.Mutable(index);
}
inline ::onnx::TensorProto* GraphProto::add_initializer() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.initializer)
  return initializer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
GraphProto::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.initializer)
  return &initializer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
GraphProto::initializer() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.initializer)
  return initializer_;
}

// optional string doc_string = 10;
inline bool GraphProto::has_doc_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GraphProto::set_has_doc_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GraphProto::clear_has_doc_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GraphProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_doc_string();
}
inline const ::std::string& GraphProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void GraphProto::set_doc_string(const ::std::string& value) {
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.doc_string)
}
#if LANG_CXX11
inline void GraphProto::set_doc_string(::std::string&& value) {
  set_has_doc_string();
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.GraphProto.doc_string)
}
#endif
inline void GraphProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.doc_string)
}
inline void GraphProto::set_doc_string(const char* value, size_t size) {
  set_has_doc_string();
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.doc_string)
}
inline ::std::string* GraphProto::mutable_doc_string() {
  set_has_doc_string();
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.GraphProto.doc_string)
  clear_has_doc_string();
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    set_has_doc_string();
  } else {
    clear_has_doc_string();
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.doc_string)
}

// repeated .onnx.ValueInfoProto input = 11;
inline int GraphProto::input_size() const {
  return input_.size();
}
inline void GraphProto::clear_input() {
  input_.Clear();
}
inline const ::onnx::ValueInfoProto& GraphProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.input)
  return input_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.input)
  return input_.Mutable(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_input() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.input)
  return input_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.input)
  return &input_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.input)
  return input_;
}

// repeated .onnx.ValueInfoProto output = 12;
inline int GraphProto::output_size() const {
  return output_.size();
}
inline void GraphProto::clear_output() {
  output_.Clear();
}
inline const ::onnx::ValueInfoProto& GraphProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.output)
  return output_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.output)
  return output_.Mutable(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_output() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.output)
  return output_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.output)
  return &output_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.output)
  return output_;
}

// repeated .onnx.ValueInfoProto value_info = 13;
inline int GraphProto::value_info_size() const {
  return value_info_.size();
}
inline void GraphProto::clear_value_info() {
  value_info_.Clear();
}
inline const ::onnx::ValueInfoProto& GraphProto::value_info(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.value_info)
  return value_info_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_value_info(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.value_info)
  return value_info_.Mutable(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_value_info() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.value_info)
  return value_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_value_info() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.value_info)
  return &value_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::value_info() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.value_info)
  return value_info_;
}

// -------------------------------------------------------------------

// TensorProto_Segment

// optional int64 begin = 1;
inline bool TensorProto_Segment::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorProto_Segment::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorProto_Segment::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorProto_Segment::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.begin)
  return begin_;
}
inline void TensorProto_Segment::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.begin)
}

// optional int64 end = 2;
inline bool TensorProto_Segment::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto_Segment::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto_Segment::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto_Segment::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.end)
  return end_;
}
inline void TensorProto_Segment::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.end)
}

// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
inline int TensorProto::dims_size() const {
  return dims_.size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.dims)
  return dims_.Get(index);
}
inline void TensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.dims)
}
inline void TensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.dims)
  return &dims_;
}

// optional .onnx.TensorProto.DataType data_type = 2;
inline bool TensorProto::has_data_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TensorProto::set_has_data_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TensorProto::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TensorProto::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::onnx::TensorProto_DataType TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_type)
  return static_cast< ::onnx::TensorProto_DataType >(data_type_);
}
inline void TensorProto::set_data_type(::onnx::TensorProto_DataType value) {
  assert(::onnx::TensorProto_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_type)
}

// optional .onnx.TensorProto.Segment segment = 3;
inline bool TensorProto::has_segment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TensorProto::set_has_segment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TensorProto::clear_has_segment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TensorProto::clear_segment() {
  if (segment_ != NULL) segment_->::onnx::TensorProto_Segment::Clear();
  clear_has_segment();
}
inline const ::onnx::TensorProto_Segment& TensorProto::segment() const {
  const ::onnx::TensorProto_Segment* p = segment_;
  // @@protoc_insertion_point(field_get:onnx.TensorProto.segment)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto_Segment*>(
      &::onnx::_TensorProto_Segment_default_instance_);
}
inline ::onnx::TensorProto_Segment* TensorProto::mutable_segment() {
  set_has_segment();
  if (segment_ == NULL) {
    segment_ = new ::onnx::TensorProto_Segment;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.segment)
  return segment_;
}
inline ::onnx::TensorProto_Segment* TensorProto::release_segment() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.segment)
  clear_has_segment();
  ::onnx::TensorProto_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
inline void TensorProto::set_allocated_segment(::onnx::TensorProto_Segment* segment) {
  delete segment_;
  segment_ = segment;
  if (segment) {
    set_has_segment();
  } else {
    clear_has_segment();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.segment)
}

// repeated float float_data = 4 [packed = true];
inline int TensorProto::float_data_size() const {
  return float_data_.size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.float_data)
  return float_data_.Get(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.float_data)
}
inline void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 5 [packed = true];
inline int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int32_data)
  return int32_data_.Get(index);
}
inline void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int32_data)
}
inline void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int32_data)
  return &int32_data_;
}

// repeated bytes string_data = 6;
inline int TensorProto::string_data_size() const {
  return string_data_.size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TensorProto::set_string_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorProto.string_data)
  string_data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TensorProto::set_string_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.string_data)
}
inline ::std::string* TensorProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:onnx.TensorProto.string_data)
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.string_data)
}
#if LANG_CXX11
inline void TensorProto::add_string_data(::std::string&& value) {
  string_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.TensorProto.string_data)
}
#endif
inline void TensorProto::add_string_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.TensorProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.string_data)
  return &string_data_;
}

// repeated int64 int64_data = 7 [packed = true];
inline int TensorProto::int64_data_size() const {
  return int64_data_.size();
}
inline void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::google::protobuf::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int64_data)
  return int64_data_.Get(index);
}
inline void TensorProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int64_data)
}
inline void TensorProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int64_data)
  return int64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int64_data)
  return &int64_data_;
}

// optional string name = 8;
inline bool TensorProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.name)
  return name_.GetNoArena();
}
inline void TensorProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.name)
}
#if LANG_CXX11
inline void TensorProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorProto.name)
}
#endif
inline void TensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.name)
}
inline ::std::string* TensorProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.name)
}

// optional bytes raw_data = 9;
inline bool TensorProto::has_raw_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto::set_has_raw_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorProto::clear_has_raw_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorProto::clear_raw_data() {
  raw_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_data();
}
inline const ::std::string& TensorProto::raw_data() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.raw_data)
  return raw_data_.GetNoArena();
}
inline void TensorProto::set_raw_data(const ::std::string& value) {
  set_has_raw_data();
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.raw_data)
}
#if LANG_CXX11
inline void TensorProto::set_raw_data(::std::string&& value) {
  set_has_raw_data();
  raw_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorProto.raw_data)
}
#endif
inline void TensorProto::set_raw_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_raw_data();
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const void* value, size_t size) {
  set_has_raw_data();
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.raw_data)
}
inline ::std::string* TensorProto::mutable_raw_data() {
  set_has_raw_data();
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.raw_data)
  return raw_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_raw_data() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.raw_data)
  clear_has_raw_data();
  return raw_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data != NULL) {
    set_has_raw_data();
  } else {
    clear_has_raw_data();
  }
  raw_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_data);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.raw_data)
}

// repeated double double_data = 10 [packed = true];
inline int TensorProto::double_data_size() const {
  return double_data_.size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.double_data)
  return double_data_.Get(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.double_data)
}
inline void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.double_data)
  return &double_data_;
}

// repeated uint64 uint64_data = 11 [packed = true];
inline int TensorProto::uint64_data_size() const {
  return uint64_data_.size();
}
inline void TensorProto::clear_uint64_data() {
  uint64_data_.Clear();
}
inline ::google::protobuf::uint64 TensorProto::uint64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.uint64_data)
  return uint64_data_.Get(index);
}
inline void TensorProto::set_uint64_data(int index, ::google::protobuf::uint64 value) {
  uint64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.uint64_data)
}
inline void TensorProto::add_uint64_data(::google::protobuf::uint64 value) {
  uint64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.uint64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TensorProto::uint64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.uint64_data)
  return uint64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TensorProto::mutable_uint64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.uint64_data)
  return &uint64_data_;
}

// -------------------------------------------------------------------

// SparseTensorProto

// repeated int64 dims = 1;
inline int SparseTensorProto::dims_size() const {
  return dims_.size();
}
inline void SparseTensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 SparseTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.dims)
  return dims_.Get(index);
}
inline void SparseTensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.SparseTensorProto.dims)
}
inline void SparseTensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.SparseTensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SparseTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.SparseTensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SparseTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SparseTensorProto.dims)
  return &dims_;
}

// optional .onnx.TensorProto indices = 2;
inline bool SparseTensorProto::has_indices() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparseTensorProto::set_has_indices() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparseTensorProto::clear_has_indices() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparseTensorProto::clear_indices() {
  if (indices_ != NULL) indices_->::onnx::TensorProto::Clear();
  clear_has_indices();
}
inline const ::onnx::TensorProto& SparseTensorProto::indices() const {
  const ::onnx::TensorProto* p = indices_;
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.indices)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto*>(
      &::onnx::_TensorProto_default_instance_);
}
inline ::onnx::TensorProto* SparseTensorProto::mutable_indices() {
  set_has_indices();
  if (indices_ == NULL) {
    indices_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.SparseTensorProto.indices)
  return indices_;
}
inline ::onnx::TensorProto* SparseTensorProto::release_indices() {
  // @@protoc_insertion_point(field_release:onnx.SparseTensorProto.indices)
  clear_has_indices();
  ::onnx::TensorProto* temp = indices_;
  indices_ = NULL;
  return temp;
}
inline void SparseTensorProto::set_allocated_indices(::onnx::TensorProto* indices) {
  delete indices_;
  indices_ = indices;
  if (indices) {
    set_has_indices();
  } else {
    clear_has_indices();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.SparseTensorProto.indices)
}

// optional .onnx.TensorProto values = 3;
inline bool SparseTensorProto::has_values() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparseTensorProto::set_has_values() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparseTensorProto::clear_has_values() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparseTensorProto::clear_values() {
  if (values_ != NULL) values_->::onnx::TensorProto::Clear();
  clear_has_values();
}
inline const ::onnx::TensorProto& SparseTensorProto::values() const {
  const ::onnx::TensorProto* p = values_;
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.values)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto*>(
      &::onnx::_TensorProto_default_instance_);
}
inline ::onnx::TensorProto* SparseTensorProto::mutable_values() {
  set_has_values();
  if (values_ == NULL) {
    values_ = new ::onnx::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.SparseTensorProto.values)
  return values_;
}
inline ::onnx::TensorProto* SparseTensorProto::release_values() {
  // @@protoc_insertion_point(field_release:onnx.SparseTensorProto.values)
  clear_has_values();
  ::onnx::TensorProto* temp = values_;
  values_ = NULL;
  return temp;
}
inline void SparseTensorProto::set_allocated_values(::onnx::TensorProto* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.SparseTensorProto.values)
}

// -------------------------------------------------------------------

// TypeProto_TensorShapeProto_Dimension

// optional int64 dim_value = 1;
inline bool TypeProto_TensorShapeProto_Dimension::has_dim_value() const {
  return value_case() == kDimValue;
}
inline void TypeProto_TensorShapeProto_Dimension::set_has_dim_value() {
  _oneof_case_[0] = kDimValue;
}
inline void TypeProto_TensorShapeProto_Dimension::clear_dim_value() {
  if (has_dim_value()) {
    value_.dim_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 TypeProto_TensorShapeProto_Dimension::dim_value() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.TensorShapeProto.Dimension.dim_value)
  if (has_dim_value()) {
    return value_.dim_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TypeProto_TensorShapeProto_Dimension::set_dim_value(::google::protobuf::int64 value) {
  if (!has_dim_value()) {
    clear_value();
    set_has_dim_value();
  }
  value_.dim_value_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.TensorShapeProto.Dimension.dim_value)
}

// optional string dim_param = 2;
inline bool TypeProto_TensorShapeProto_Dimension::has_dim_param() const {
  return value_case() == kDimParam;
}
inline void TypeProto_TensorShapeProto_Dimension::set_has_dim_param() {
  _oneof_case_[0] = kDimParam;
}
inline void TypeProto_TensorShapeProto_Dimension::clear_dim_param() {
  if (has_dim_param()) {
    value_.dim_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& TypeProto_TensorShapeProto_Dimension::dim_param() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
  if (has_dim_param()) {
    return value_.dim_param_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TypeProto_TensorShapeProto_Dimension::set_dim_param(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
}
#if LANG_CXX11
inline void TypeProto_TensorShapeProto_Dimension::set_dim_param(::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
}
#endif
inline void TypeProto_TensorShapeProto_Dimension::set_dim_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
}
inline void TypeProto_TensorShapeProto_Dimension::set_dim_param(const char* value, size_t size) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
}
inline ::std::string* TypeProto_TensorShapeProto_Dimension::mutable_dim_param() {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
  return value_.dim_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeProto_TensorShapeProto_Dimension::release_dim_param() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
  if (has_dim_param()) {
    clear_has_value();
    return value_.dim_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TypeProto_TensorShapeProto_Dimension::set_allocated_dim_param(::std::string* dim_param) {
  if (!has_dim_param()) {
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (dim_param != NULL) {
    set_has_dim_param();
    value_.dim_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        dim_param);
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.TensorShapeProto.Dimension.dim_param)
}

inline bool TypeProto_TensorShapeProto_Dimension::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypeProto_TensorShapeProto_Dimension::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypeProto_TensorShapeProto_Dimension::ValueCase TypeProto_TensorShapeProto_Dimension::value_case() const {
  return TypeProto_TensorShapeProto_Dimension::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TypeProto_TensorShapeProto

// repeated .onnx.TypeProto.TensorShapeProto.Dimension dim = 1;
inline int TypeProto_TensorShapeProto::dim_size() const {
  return dim_.size();
}
inline void TypeProto_TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline const ::onnx::TypeProto_TensorShapeProto_Dimension& TypeProto_TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.TensorShapeProto.dim)
  return dim_.Get(index);
}
inline ::onnx::TypeProto_TensorShapeProto_Dimension* TypeProto_TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::onnx::TypeProto_TensorShapeProto_Dimension* TypeProto_TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:onnx.TypeProto.TensorShapeProto.dim)
  return dim_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto_TensorShapeProto_Dimension >*
TypeProto_TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TypeProto.TensorShapeProto.dim)
  return &dim_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto_TensorShapeProto_Dimension >&
TypeProto_TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:onnx.TypeProto.TensorShapeProto.dim)
  return dim_;
}

// -------------------------------------------------------------------

// TypeProto_TensorTypeProto

// optional .onnx.TensorProto.DataType elem_type = 1;
inline bool TypeProto_TensorTypeProto::has_elem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeProto_TensorTypeProto::set_has_elem_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeProto_TensorTypeProto::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeProto_TensorTypeProto::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
inline ::onnx::TensorProto_DataType TypeProto_TensorTypeProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.TensorTypeProto.elem_type)
  return static_cast< ::onnx::TensorProto_DataType >(elem_type_);
}
inline void TypeProto_TensorTypeProto::set_elem_type(::onnx::TensorProto_DataType value) {
  assert(::onnx::TensorProto_DataType_IsValid(value));
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.TensorTypeProto.elem_type)
}

// optional .onnx.TypeProto.TensorShapeProto shape = 2;
inline bool TypeProto_TensorTypeProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeProto_TensorTypeProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeProto_TensorTypeProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeProto_TensorTypeProto::clear_shape() {
  if (shape_ != NULL) shape_->::onnx::TypeProto_TensorShapeProto::Clear();
  clear_has_shape();
}
inline const ::onnx::TypeProto_TensorShapeProto& TypeProto_TensorTypeProto::shape() const {
  const ::onnx::TypeProto_TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.TensorTypeProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto_TensorShapeProto*>(
      &::onnx::_TypeProto_TensorShapeProto_default_instance_);
}
inline ::onnx::TypeProto_TensorShapeProto* TypeProto_TensorTypeProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::onnx::TypeProto_TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.TensorTypeProto.shape)
  return shape_;
}
inline ::onnx::TypeProto_TensorShapeProto* TypeProto_TensorTypeProto::release_shape() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.TensorTypeProto.shape)
  clear_has_shape();
  ::onnx::TypeProto_TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void TypeProto_TensorTypeProto::set_allocated_shape(::onnx::TypeProto_TensorShapeProto* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.TensorTypeProto.shape)
}

// -------------------------------------------------------------------

// TypeProto_SparseTensorTypeProto

// optional .onnx.TensorProto.DataType elem_type = 1;
inline bool TypeProto_SparseTensorTypeProto::has_elem_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypeProto_SparseTensorTypeProto::set_has_elem_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TypeProto_SparseTensorTypeProto::clear_has_elem_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TypeProto_SparseTensorTypeProto::clear_elem_type() {
  elem_type_ = 0;
  clear_has_elem_type();
}
inline ::onnx::TensorProto_DataType TypeProto_SparseTensorTypeProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.SparseTensorTypeProto.elem_type)
  return static_cast< ::onnx::TensorProto_DataType >(elem_type_);
}
inline void TypeProto_SparseTensorTypeProto::set_elem_type(::onnx::TensorProto_DataType value) {
  assert(::onnx::TensorProto_DataType_IsValid(value));
  set_has_elem_type();
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.SparseTensorTypeProto.elem_type)
}

// optional .onnx.TypeProto.TensorShapeProto shape = 2;
inline bool TypeProto_SparseTensorTypeProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypeProto_SparseTensorTypeProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TypeProto_SparseTensorTypeProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TypeProto_SparseTensorTypeProto::clear_shape() {
  if (shape_ != NULL) shape_->::onnx::TypeProto_TensorShapeProto::Clear();
  clear_has_shape();
}
inline const ::onnx::TypeProto_TensorShapeProto& TypeProto_SparseTensorTypeProto::shape() const {
  const ::onnx::TypeProto_TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.SparseTensorTypeProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto_TensorShapeProto*>(
      &::onnx::_TypeProto_TensorShapeProto_default_instance_);
}
inline ::onnx::TypeProto_TensorShapeProto* TypeProto_SparseTensorTypeProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::onnx::TypeProto_TensorShapeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.SparseTensorTypeProto.shape)
  return shape_;
}
inline ::onnx::TypeProto_TensorShapeProto* TypeProto_SparseTensorTypeProto::release_shape() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.SparseTensorTypeProto.shape)
  clear_has_shape();
  ::onnx::TypeProto_TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void TypeProto_SparseTensorTypeProto::set_allocated_shape(::onnx::TypeProto_TensorShapeProto* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.SparseTensorTypeProto.shape)
}

// -------------------------------------------------------------------

// TypeProto

// optional .onnx.TypeProto.TensorTypeProto tensor_type = 1;
inline bool TypeProto::has_tensor_type() const {
  return value_case() == kTensorType;
}
inline void TypeProto::set_has_tensor_type() {
  _oneof_case_[0] = kTensorType;
}
inline void TypeProto::clear_tensor_type() {
  if (has_tensor_type()) {
    delete value_.tensor_type_;
    clear_has_value();
  }
}
inline  const ::onnx::TypeProto_TensorTypeProto& TypeProto::tensor_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.tensor_type)
  return has_tensor_type()
      ? *value_.tensor_type_
      : ::onnx::TypeProto_TensorTypeProto::default_instance();
}
inline ::onnx::TypeProto_TensorTypeProto* TypeProto::mutable_tensor_type() {
  if (!has_tensor_type()) {
    clear_value();
    set_has_tensor_type();
    value_.tensor_type_ = new ::onnx::TypeProto_TensorTypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.tensor_type)
  return value_.tensor_type_;
}
inline ::onnx::TypeProto_TensorTypeProto* TypeProto::release_tensor_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.tensor_type)
  if (has_tensor_type()) {
    clear_has_value();
    ::onnx::TypeProto_TensorTypeProto* temp = value_.tensor_type_;
    value_.tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TypeProto::set_allocated_tensor_type(::onnx::TypeProto_TensorTypeProto* tensor_type) {
  clear_value();
  if (tensor_type) {
    set_has_tensor_type();
    value_.tensor_type_ = tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.tensor_type)
}

// optional .onnx.TypeProto.SparseTensorTypeProto sparse_tensor_type = 2;
inline bool TypeProto::has_sparse_tensor_type() const {
  return value_case() == kSparseTensorType;
}
inline void TypeProto::set_has_sparse_tensor_type() {
  _oneof_case_[0] = kSparseTensorType;
}
inline void TypeProto::clear_sparse_tensor_type() {
  if (has_sparse_tensor_type()) {
    delete value_.sparse_tensor_type_;
    clear_has_value();
  }
}
inline  const ::onnx::TypeProto_SparseTensorTypeProto& TypeProto::sparse_tensor_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.sparse_tensor_type)
  return has_sparse_tensor_type()
      ? *value_.sparse_tensor_type_
      : ::onnx::TypeProto_SparseTensorTypeProto::default_instance();
}
inline ::onnx::TypeProto_SparseTensorTypeProto* TypeProto::mutable_sparse_tensor_type() {
  if (!has_sparse_tensor_type()) {
    clear_value();
    set_has_sparse_tensor_type();
    value_.sparse_tensor_type_ = new ::onnx::TypeProto_SparseTensorTypeProto;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.sparse_tensor_type)
  return value_.sparse_tensor_type_;
}
inline ::onnx::TypeProto_SparseTensorTypeProto* TypeProto::release_sparse_tensor_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.sparse_tensor_type)
  if (has_sparse_tensor_type()) {
    clear_has_value();
    ::onnx::TypeProto_SparseTensorTypeProto* temp = value_.sparse_tensor_type_;
    value_.sparse_tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TypeProto::set_allocated_sparse_tensor_type(::onnx::TypeProto_SparseTensorTypeProto* sparse_tensor_type) {
  clear_value();
  if (sparse_tensor_type) {
    set_has_sparse_tensor_type();
    value_.sparse_tensor_type_ = sparse_tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sparse_tensor_type)
}

inline bool TypeProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypeProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypeProto::ValueCase TypeProto::value_case() const {
  return TypeProto::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace onnx

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::onnx::AttributeProto_AttributeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::AttributeProto_AttributeType>() {
  return ::onnx::AttributeProto_AttributeType_descriptor();
}
template <> struct is_proto_enum< ::onnx::TensorProto_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::TensorProto_DataType>() {
  return ::onnx::TensorProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::onnx::Version> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx::Version>() {
  return ::onnx::Version_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onnx_2eproto__INCLUDED
